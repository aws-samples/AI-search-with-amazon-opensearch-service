AWSTemplateFormatVersion: 2010-09-09
Description: Template to provision OpenSearch cluster and SageMaker Notebook for semantic search

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:
          - AppName          
          - OpenSearchUsername
          - OpenSearchPassword
          - OpenSearchIndexName
          - LambdaFunctionName
          - APIGatewayName
          - SageMakerNotebookName
    ParameterLabels:      
      AppName:
        default: Name of the overall application
      OpenSearchUsername:
        default: OpenSearch cluster username
      OpenSearchPassword:
        default: OpenSearch cluster password
      OpenSearchIndexName:
        default: OpenSearch index name
      LambdaFunctionName:
        default: Lambda function name
      APIGatewayName:
        default: API gateway name
      SageMakerNotebookName:
        default: Name of SageMaker Notebook Instance
      
Parameters:
  ImageId:
    Type: String
    Description: 'Linux 2 AMI for Ireland eu-west1 Region'
    Default: 'ami-08a52ddb321b32a8c'
  InstanceType:
    Type: String
    Description: Choosing c5.large
    Default: c5.large   
  OpenSearchUsername:
    AllowedPattern: '^[a-zA-Z0-9]+$'
    Default: master
    Description: User name for the account that will be added to the OpenSearch cluster.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  OpenSearchPassword:
    AllowedPattern: '(?=^.{8,32}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    Description: Password for the account named above. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
    Default: Semantic123!
  OpenSearchIndexName:
    Default: llm_apps_workshop_embeddings
    Type: String    
    Description: Name of the OpenSearch index for storing embeddings.
  AppName:
    Default: opensearch-gen-ai
    Type: String
    AllowedValues: [opensearch-gen-ai]
    Description: Name of the overall application, this is used while creating the ML model endpoint.
  LambdaFunctionName:
    Default: LLMApp
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Description: Name of the Lambda function for LLM Apps  
  APIGatewayName:
    Default: LLMAppAPIGW
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Description: Name of the Lambda function for LLM Apps  
  SageMakerNotebookName:
    Default: semantic-search
    Type: String
    Description: Enter name of SageMaker Notebook instance. The notebook name must _not_ already exist in your AWS account/region.
    MinLength: 1
    MaxLength: 63
  SageMakerIAMRole:
    Description: Name of IAM role that will be created by this cloud formation template. The role name must _not_ already exist in your AWS account.
    Type: String
    Default: "LLMAppsIAMRole"  

  ApiStageName:
    Description: The APi Gateway API stage name
    Type: String
    Default: prod 

Resources:

  OpenSearchSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub OpenSearchSecret-${AWS::StackName}
      Description: OpenSearch username and password
      SecretString: !Sub '{ "username" : "${OpenSearchUsername}", "password" : "${OpenSearchPassword}" }'

  CodeRepository:
    Type: AWS::SageMaker::CodeRepository
    Properties:
      GitConfig:
        RepositoryUrl: https://github.com/aws-samples/semantic-search-with-amazon-opensearch

  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: semantic-search-nb
      InstanceType: ml.m5d.2xlarge
      RoleArn: !GetAtt NBRole.Arn
      DefaultCodeRepository: !GetAtt CodeRepository.CodeRepositoryName

  NBRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CustomNotebookAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "dynamodb:*"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/TranslateReadOnly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref SageMakerIAMRole
      Policies:
        - PolicyName: CustomNotebookAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ReadFromOpenSearch
                Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Sid: ReadSecretFromSecretsManager
                Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
              - Sid: ReadWriteFromECR
                Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:DescribeImages"
                  - "ecr:DescribeRepositories"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:ListImages"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                  - "ecr:CreateRepository"
                  - "ecr:GetAuthorizationToken"
                  - "ec2:DescribeAvailabilityZones"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/TranslateReadOnly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  s3BucketTraining:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  s3BucketHosting:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*
      EngineVersion: 'OpenSearch_2.7'
      ClusterConfig:
        InstanceType: "r6g.2xlarge.search"
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 20
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        AnonymousAuthEnabled: False
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: !Sub ${OpenSearchUsername}
          MasterUserPassword: !Sub ${OpenSearchPassword}
      NodeToNodeEncryptionOptions:
        Enabled: True
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: alias/aws/es
      DomainEndpointOptions:
        EnforceHTTPS: True

  EmbeddingEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub
      - '${AppName}-embedding-gpt-j-6b-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      EndpointConfigName: !GetAtt EmbeddingEndpointConfig.EndpointConfigName

  EmbeddingEndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub
      - '${AppName}-embedding-gpt-j-6b-endppoint-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: "ml.g5.2xlarge"
          ModelName: !GetAtt EmbeddingModel.ModelName
          VariantName: !GetAtt EmbeddingModel.ModelName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W1200
            reason: Solution does not have KMS encryption enabled by default

  EmbeddingModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      ModelName: !Sub
      - '${AppName}-embedding-gpt-j-6b-model-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      PrimaryContainer:
        ModelDataUrl: !Sub "s3://jumpstart-cache-prod-${AWS::Region}/huggingface-infer/prepack/v1.0.1/infer-prepack-huggingface-textembedding-gpt-j-6b-fp16.tar.gz"
        Image: !Sub "763104351884.dkr.ecr.${AWS::Region}.amazonaws.com/pytorch-inference:1.12.0-gpu-py38"
        Environment: {"TS_DEFAULT_WORKERS_PER_MODEL": "1"}
        Mode: "SingleModel"
      ExecutionRoleArn: !GetAtt Role.Arn

  LLMEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub
      - '${AppName}-llm-falcon-7b-bf16-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      EndpointConfigName: !GetAtt LLMEndpointConfig.EndpointConfigName

  LLMEndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub
      - '${AppName}-llm-falcon-7b-bf16-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: "ml.g5.4xlarge"
          ModelName: !GetAtt LLMModel.ModelName
          VariantName: !GetAtt LLMModel.ModelName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W1200
            reason: Solution does not have KMS encryption enabled by default

  LLMModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      ModelName: !Sub
      - '${AppName}-llm-falcon-7b-bf16-${RandomGUID}'
      - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      PrimaryContainer:
        ModelDataUrl: !Sub "s3://jumpstart-cache-prod-${AWS::Region}/huggingface-infer/prepack/v1.0.0/infer-prepack-huggingface-llm-falcon-7b-instruct-bf16.tar.gz"
        Image: !Sub "763104351884.dkr.ecr.${AWS::Region}.amazonaws.com/huggingface-pytorch-tgi-inference:2.0.0-tgi0.8.2-gpu-py39-cu118-ubuntu20.04"
        Environment: {"HF_MODEL_ID" : "/opt/ml/model","TS_DEFAULT_WORKERS_PER_MODEL": "1", "SM_NUM_GPUS": "1", "MAX_INPUT_LENGTH": "2048", "MAX_TOTAL_TOKENS": "4096"}
        Mode: "SingleModel"
      ExecutionRoleArn: !GetAtt Role.Arn

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: API-LLM

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "LLMAppFunction.Arn"
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt "LLMAppFunction.Arn"


  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: SessionId
        KeyType: HASH
      AttributeDefinitions:
      - AttributeName: SessionId
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: conversation-history-memory
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain


  LLMAppFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Lambda function for providing an LLM app (text generation, RAG) endpoint.
      Runtime: python3.9
      Code:
        S3Bucket: !Ref s3BucketTraining
        S3Key: lambda.zip
      Handler: main.handler
      MemorySize: 10240
      Timeout: 600
      Role: !GetAtt LambdaIAMRole.Arn
      Tags: 
        -
          Key: Project
          Value: !Ref AppName
        -
          Key: Version
          Value: v3
      Environment:
        Variables:
          TEXT2TEXT_ENDPOINT_NAME: !GetAtt  LLMEndpoint.EndpointName
          EMBEDDING_ENDPOINT_NAME: !GetAtt  EmbeddingEndpoint.EndpointName
          OPENSEARCH_SECRET: !Ref OpenSearchSecret
          OPENSEARCH_USERNAME: !Sub ${OpenSearchUsername}
          OPENSEARCH_PASSWORD: !Sub ${OpenSearchPassword}
          OPENSEARCH_DOMAIN_ENDPOINT: !GetAtt OpenSearchServiceDomain.DomainEndpoint
          OPENSEARCH_INDEX: !Ref OpenSearchIndexName
          APP_NAME: !Ref AppName
          DYNAMODB_TABLE: conversation-history-memory

  LLMAppFunctionTwo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaOpenSearchIngestion
      Description: Lambda function for ingesting data into opensearch.
      Runtime: python3.9
      Code:
        S3Bucket: !Ref s3BucketTraining
        S3Key: lambda_s3.zip
      Handler: main_s3.handler
      MemorySize: 10240
      Timeout: 600
      Role: !GetAtt LambdaIAMRole.Arn
      Tags: 
        -
          Key: Project
          Value: !Ref AppName
        -
          Key: Version
          Value: v3
      Environment:
        Variables:
          TEXT2TEXT_ENDPOINT_NAME: !GetAtt  LLMEndpoint.EndpointName
          EMBEDDING_ENDPOINT_NAME: !GetAtt  EmbeddingEndpoint.EndpointName
          OPENSEARCH_SECRET: !Ref OpenSearchSecret
          OPENSEARCH_USERNAME: !Sub ${OpenSearchUsername}
          OPENSEARCH_PASSWORD: !Sub ${OpenSearchPassword}
          OPENSEARCH_DOMAIN_ENDPOINT: !GetAtt OpenSearchServiceDomain.DomainEndpoint
          OPENSEARCH_INDEX: !Ref OpenSearchIndexName
          APP_NAME: !Ref AppName
          DYNAMODB_TABLE: conversation-history-memory

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
          PolicyName: "lambda"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: Logging
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: "*"
              - Sid: ReadSecretManagerSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
                
          PolicyName: "lambdaVPC"
      


  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

  DemoInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups: 
        - !Ref DemoSecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            cd /home/ec2-user
            sudo yum install awscli
            sudo yum install zip
            sudo yum -y install git
            mkdir /home/ec2-user/semantic-search-with-amazon-opensearch
            git clone https://github.com/aws-samples/amazon-sagemaker-bert-finetuning-for-search/ /home/ec2-user/semantic-search-with-amazon-opensearch
            aws s3 cp /home/ec2-user/semantic-search-with-amazon-opensearch/rag/ s3://${s3BucketTraining} --recursive
            aws s3 cp s3://${s3BucketTraining}/webapp.zip /home/ec2-user
            unzip /home/ec2-user/webapp.zip -d /home/ec2-user
            sudo chmod -R 0777 /home/ec2-user/pdfs
            sed -i 's/API_URL_TO_BE_REPLACED/${ApiGatewayRestApi}/g' /home/ec2-user/api.py
            sed -i 's/pdf-repo-uploads/${s3BucketTraining}/g' /home/ec2-user/app.py
            python3 -m venv /home/ec2-user/.env
            source /home/ec2-user/.env/bin/activate
            pip install streamlit
            pip install boto3
            streamlit run app.py

  DemoSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG to allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8502
          ToPort: 8502
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8503
          ToPort: 8503
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8504
          ToPort: 8504
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2-SG
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: Webserver
      Roles: 
        - !Ref Ec2IAMRole
  Ec2IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation



Outputs:

  WebAppURL:
    Description: web app URL 
    Value: !Join
              - ''
              - - 'http://'
                - !GetAtt DemoInstance.PublicIp
                - ':8501/'

  OpenSearchDomainEndpoint:
    Description: OpenSearch domain endpoint
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - DomainEndpoint

  OpenSourceDomainArn:
    Description: OpenSearch domain ARN
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - Arn

  OpenSearchDomainName:
    Description: OpenSearch domain name
    Value: !Ref OpenSearchServiceDomain

  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region

  s3BucketTraining:
    Description: S3 bucket name for training
    Value: !Ref s3BucketTraining

  s3BucketHostingBucketName:
    Description: S3 bucket name for frontend hosting
    Value: !Ref s3BucketHosting

  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - s3BucketHosting
          - DomainName
    Description: Name of S3 bucket to hold website content

  SageMakerNotebookURL:
    Description: SageMaker Notebook Instance
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/sagemaker/home?region=us-east-1#/notebook-instances/openNotebook/'
        - !GetAtt NotebookInstance.NotebookInstanceName
        - '?view=classic'

  LLMEndpointName:
    Description: Name of the LLM endpoint
    Value: !GetAtt LLMEndpoint.EndpointName

  EmbeddingEndpointName:
    Description: Name of the LLM endpoint
    Value: !GetAtt EmbeddingEndpoint.EndpointName

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: "conversation-history-memory"
    
  OpenSearchSecret:
    Description: Name of the OpenSearch secret in Secrets Manager
    Value: !Ref OpenSearchSecret

  LLMAppAPIEndpoint:
    Description: "API (prod) stage endpoint"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/"

