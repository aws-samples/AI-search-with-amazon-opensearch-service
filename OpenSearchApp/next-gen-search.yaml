AWSTemplateFormatVersion: 2010-09-09
Description: Template to provision OpenSearch cluster for NextGen ML search

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:
          - AppName
    ParameterLabels:
      AppName:
        default: Name of the overall application
      
Parameters:
  SageMakerIAMRole:
    Description: Name of IAM role that will be created by this cloud formation template. The role name must _not_ already exist in your AWS account.
    Type: String
    Default: "MLIAMRole"  
  AppName:
    Default: opensearch-ml-search
    Type: String
    AllowedValues: [opensearch-ml-search]
    Description: Name of the overall application, this is used while creating the ML model endpoint.
  OpenSearchMasterUsername:
    AllowedPattern: '^[a-zA-Z0-9]+$'
    Default: master
    Description: User name for the account that will be added to the OpenSearch cluster.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  OpenSearchMasterPassword:
    AllowedPattern: '(?=^.{8,32}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    Description: Password for the account named above. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
    Default: ML-Search123!
  OpenSearchAccessRoleMapping:
    Description: Opensearch predefined backend role 
    Type: String
    Default: all_access

Mappings: 
  RegionMap: 
    us-east-1:
      HVM64: ami-041feb57c611358bd
    us-west-2:
      HVM64: ami-07d07d65c47e5aa90
    eu-west-1:
      HVM64: ami-0b9fd8b55a6e3c9d5

Resources:
  OpenSearchSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub OpenSearchSecret-${AWS::StackName}
      Description: OpenSearch username and password
      SecretString: !Sub '{ "username" : "${OpenSearchMasterUsername}", "password" : "${OpenSearchMasterPassword}" }'
  
  UpdateAOSRoleMapping:
    Type: AWS::Lambda::Function    
    DeletionPolicy: Retain
    Properties:
      Handler: index.lambda_handler      
      Runtime: python3.9
      Timeout: 240
      Role: !GetAtt  NBRole.Arn
      FunctionName: !Sub oss-role-mapping-update-${AWS::StackName}
      Code:
        ZipFile: |
          import boto3
          import botocore
          import urllib3
          import json
          import cfnresponse
          import os
          from botocore.vendored import requests
          from botocore.exceptions import ClientError

          SECRET_ARN = os.getenv('SECRET_ARN')
          REGION = os.getenv('REGION')
          AOSUSER = os.getenv('AOSUSER')
          AOSURL = os.getenv('AOSURL')
          ROLE_NAME = os.getenv('ROLE_NAME')
          APP_ROLE_ARN = os.getenv('APP_ROLE_ARN')

          def RetrieveAOSPassword(event, context):
            
            # Create a Secrets Manager client
            session = boto3.session.Session()
            client = session.client(
                service_name='secretsmanager',
                region_name=REGION
            )
              
            secret = ""
            
            try:
                get_secret_value_response = client.get_secret_value(
                    SecretId=SECRET_ARN
                )
            except ClientError as err:
                print(err)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
                # Decrypts secret using the associated KMS key.
                # Depending on whether the secret is a string or binary, one of these fields will be populated.
                if 'SecretString' in get_secret_value_response:
                    secret = get_secret_value_response['SecretString']
                else:
                    decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])

            password_secret = json.loads(secret)
            
            responseData = password_secret["password"]

            if password_secret:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"OpenSearchMasterPassword": "===="})
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, {"OpenSearchMasterPassword": "Failed to retrieve password"})
            
            return responseData

          def lambda_handler(event, context):                                          
              # The query you want to send to OpenSearch
              permissions_query = {
                  "cluster_permissions": [
                      "cluster_monitor",
                        "cluster_composite_ops",
                        "indices:admin/template/get",
                        "indices:admin/template/put",
                        "cluster:admin/ingest/pipeline/put",
                        "cluster:admin/opendistro/ism/policy/write",
                        "cluster_all"
                    ],
                    "index_permissions":  [
                        {
                          "index_patterns": [
                            "*"
                          ],
                          "dls": "",
                          "fls": [],
                          "masked_fields": [],
                          "allowed_actions": [
                            "indices_all",
                            "manage_aliases"
                          ]
                        }
                      ],
                      "tenant_permissions": []
                  }
              
              back_end_role_mapping_query = {
                  "backend_roles" : [ APP_ROLE_ARN ],
                  "hosts" : [],
                  "users" : [AOSUSER]
                }
              
              
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                    password = RetrieveAOSPassword (event, context)              
                    create_role_url = 'https://' + AOSURL + '/_plugins/_security/api/roles/'+ROLE_NAME
                    create_role_mapping_url = 'https://' + AOSURL + '/_plugins/_security/api/rolesmapping/'+ROLE_NAME

                    #Connect
                    http = urllib3.PoolManager()
                    headers = {'Content-Type': 'application/json'}
                    headers.update(urllib3.make_headers(basic_auth=AOSUSER+':'+password))

                    #Create opensearch role mapping
                    role_mapping_response = http.request("PUT",
                                    create_role_mapping_url,
                                    body = json.dumps(back_end_role_mapping_query),
                                    headers = headers,
                                    retries = False)

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {"RoleAndMapping": "updated"})
                  print ("Success!")
              except Exception as e:
                  print(e)
                  print ("Internal Error!")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"error",e})
      Environment:
        Variables:  
          REGION: !Ref AWS::Region
          SECRET_ARN: !Ref OpenSearchSecret
          ROLE_NAME: !Ref OpenSearchAccessRoleMapping
          AOSUSER: !Ref OpenSearchMasterUsername
          AOSURL: !GetAtt OpenSearchServiceDomain.DomainEndpoint    
          APP_ROLE_ARN: !GetAtt NBRole.Arn

  Lambdatrigger:
    Type: "Custom::UpdateAOSRoleMapping"
    DependsOn: UpdateAOSRoleMapping      
    Properties:
      ServiceToken: !GetAtt "UpdateAOSRoleMapping.Arn" 

  NotebookInstanceLifecycleConfiguration:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      NotebookInstanceLifecycleConfigName: webapp-app-launch
      OnCreate: 
        - Content:
            Fn::Base64: 
              Fn::Sub:
                - |
                  #!/bin/bash
                  set -e
                  cd /home/ec2-user/SageMaker
                  sudo yum install awscli
                  sudo yum install zip
                  sudo yum -y install git
                  if [ ! -d "AI-search-with-amazon-opensearch-service" ]; then
                  git clone -b Neural-Sparse-Search-blog https://github.com/aws-samples/AI-search-with-amazon-opensearch-service.git
                  echo ${s3Bucket}
                  wget https://d2d5zhnefzqxjo.cloudfront.net/neural-sparse-handler.tar.gz
                  aws s3 cp /home/ec2-user/SageMaker/neural-sparse-handler.tar.gz s3://${s3Bucket}
                  fi
                  cd AI-search-with-amazon-opensearch-service
                  sudo chmod -R 0777 /home/ec2-user/SageMaker
                  sudo chmod +x /home/ec2-user/SageMaker/AI-search-with-amazon-opensearch-service/deploy.sh
                  source /home/ec2-user/anaconda3/bin/activate python3
                  pip install streamlit==1.38.0
                  pip install boto3==1.35.4
                  pip install requests_aws4auth==1.3.1
                  pip install opensearch-py==2.7.1
                  pip3 install torch==1.11.0
                  pip3 install --pre torch torchvision --extra-index-url https://download.pytorch.org/whl/nightly/cpu
                  pip install sentence-transformers==3.1.0
                  pip install nltk
                  pip install ruamel_yaml
                  pip install langchain==0.2.16
                  pip install langchain-core==0.2.39
                  pip install langchain-community==0.2.16
                  pip install langchain-experimental==0.0.65
                  pip install lark==1.2.2
                  nohup streamlit run /home/ec2-user/SageMaker/AI-search-with-amazon-opensearch-service/OpenSearchApp/app.py --server.baseUrlPath="/proxy/absolute/8501" &


                - s3Bucket: !Ref s3BucketHosting





  SagemakerNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: ml-search-opensearch
      InstanceType: ml.m6i.4xlarge
      RoleArn: !GetAtt NBRole.Arn
      VolumeSizeInGB: 1000
      LifecycleConfigName: !GetAtt NotebookInstanceLifecycleConfiguration.NotebookInstanceLifecycleConfigName

  Model:
    Type: "AWS::SageMaker::Model"
    DependsOn: [ SagemakerNotebookInstance ]
    Properties:
      ModelName: "neural-sparse-model"
      PrimaryContainer:
        Image: !Sub "763104351884.dkr.ecr.${AWS::Region}.amazonaws.com/pytorch-inference:2.0-cpu-py310"
        ModelDataUrl: !Join ['', ['s3://', !Join [ '-', [ "ml-search", !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ], '/', 'neural-sparse-handler.tar.gz']]
        Environment:
          TS_METRICS_CONFIG: "/opt/ml/model/metrics.yaml"
          TS_ASYNC_LOGGING: true
          TS_JOB_QUEUE_SIZE: 1000
          NEURAL_SPARSE_MODEL_ID: opensearch-project/opensearch-neural-sparse-encoding-v2-distill
      ExecutionRoleArn: !GetAtt NBRole.Arn

  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: "neural-sparse-model-config"
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.m5.2xlarge
          ModelName: !GetAtt Model.ModelName
          VariantName: !GetAtt Model.ModelName
  Endpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointConfigName:
        !GetAtt EndpointConfig.EndpointConfigName
      EndpointName: "neural-sparse-model"
        

  OpenSearchSagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: opensearch-sagemaker-role
      Policies:
        - PolicyName: SageMakerAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "sagemaker:InvokeEndpointAsync"
                  - "sagemaker:InvokeEndpoint"
                Resource:
                  - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*"
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                  - "bedrock:InvokeModelWithResponseStream"
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - opensearchservice.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  NBRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CustomNotebookAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/opensearch-sagemaker-role
        - PolicyName: lambda-ssm-full-access 
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt s3BucketHosting.Arn
                  - !Sub "${s3BucketHosting.Arn}/*"
              - Effect: Allow
                Action:
                  - "kendra-ranking:*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref OpenSearchSecret
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      MaxSessionDuration: 43200
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref SageMakerIAMRole
      Policies:
        - PolicyName: CustomNotebookAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ReadFromOpenSearch
                Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Sid: ReadWriteFromECR
                Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:DescribeImages"
                  - "ecr:DescribeRepositories"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:ListImages"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                  - "ecr:CreateRepository"
                  - "ecr:GetAuthorizationToken"
                  - "ec2:DescribeAvailabilityZones"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/TranslateReadOnly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  s3BucketHosting:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [ "ml-search",!Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*
      EngineVersion: 'OpenSearch_2.17'
      ClusterConfig:
        InstanceType: "r6g.2xlarge.search"
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 20
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        AnonymousAuthEnabled: False
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: !Sub ${OpenSearchMasterUsername}
          MasterUserPassword: !Sub ${OpenSearchMasterPassword}
      NodeToNodeEncryptionOptions:
        Enabled: True
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: alias/aws/es
      DomainEndpointOptions:
        EnforceHTTPS: True
      Tags:
        - {"Key" : "app","Value" : "ml-search"}

  DemoDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "store_key"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "store_key"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "dynamo_store_key_value"


  
Outputs:

  OpenSearchDomainEndpoint:
    Description: OpenSearch domain endpoint
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - DomainEndpoint
  
  OpenSearchDashboardsUrl:
    Description: OpenSearch Dashboards URL
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt OpenSearchServiceDomain.DomainEndpoint
        - '/_dashboards'

  DynamoDBTable:
    Description: DynamoDBTable
    Value: !Ref DemoDynamoDBTable

  OpenSearchDomainName:
    Description: OpenSearch domain name
    Value: !Ref OpenSearchServiceDomain

  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region

  WebappRoleArn:
    Description: This role is used by the web application to interact with OpenSearch
    Value: !GetAtt NBRole.Arn
  
  OpenSearchSecret:
    Description: Name of the OpenSearch secret in Secrets Manager
    Value: !Ref OpenSearchSecret
  
  WebAppURL:
    Description: Launch this URL to open the web application
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt SagemakerNotebookInstance.NotebookInstanceName
        - '.notebook.'
        - !Ref AWS::Region
        - '.sagemaker.aws/proxy/absolute/8501'
  
